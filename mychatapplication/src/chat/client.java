/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chat;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketException;
import javax.swing.SwingUtilities;

/**
 *
 * @author Tanzila Fatima
 */
public class client extends javax.swing.JFrame {
    static volatile boolean keepRunning = true;

    static Socket s;
    static PrintWriter writer;
    static BufferedReader reader;
    static boolean connected = false;

    /**
     * Creates new form client
     */
// initilization of GUI
    public client() {
        initComponents();//GUI components setup
      startConnectionThread(); // ✅ Feature 1 & 5: Establish connection & support reconnection

        // ✅ Feature 6: Graceful connection closure on window close
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    keepRunning = false;
                    if (writer != null) {
                        writer.println("exit:");
                        writer.flush();
                    }
                    if (reader != null) reader.close();
                    if (writer != null) writer.close();
                    if (s != null && !s.isClosed()) s.close();
                } catch (IOException ex) {
                }
            }
        });
    



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        msg_send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_send.setText("send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("client");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(msg_send)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_send)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        // TODO add your handling code here:
    //  Feature 2: Send requests (messages, commands)
String msg = msg_text.getText().trim();

    // Manual reconnect command
if (msg.equalsIgnoreCase("reconnect")) {
    msg_text.setText("");
    if (s != null && s.isConnected() && !s.isClosed()) {
        appendMsgSafe("[INFO] Reconnect command received, but already connected.");
    } else {
        appendMsgSafe("[INFO] Reconnect command received. Attempting to reconnect...");
        keepRunning = true;
        startConnectionThread(); // Your reconnect logic
    }
    return;
}

//  Handle empty message
if (msg.isEmpty()) {
    appendMsgSafe("[Client] Message cannot be empty!");
    if (writer != null) writer.println("msg:__empty__");
    return;
}

//  Handle invalid characters
if (!msg.matches("^[a-zA-Z0-9 ?!.,]+$")) {
    appendMsgSafe("[Client] Invalid characters in message! Only letters, numbers, space, and ?!., allowed.");
    if (writer != null) writer.println("msg:__invalid__");
    return;
}

//  Always show your message in chat area (even if not sent)
appendMsgSafe("You: " + msg);
msg_text.setText(""); // Clear input field

    // Feature 4: Handle connection error before sending
if (s != null && s.isConnected() && !s.isClosed() && writer != null) {

    if (msg.equalsIgnoreCase("exit")) {
        appendMsgSafe("[Client] Exiting...");
        writer.println("exit:");
        writer.flush();
        keepRunning = false;

        // Graceful close in new thread
        new Thread(() -> {
            try {
                Thread.sleep(1000);
                if (reader != null) reader.close();
                if (writer != null) writer.close();
                if (s != null && !s.isClosed()) s.close();
                appendMsgSafe("[INFO] Client resources cleaned up successfully.");
            } catch (IOException | InterruptedException ex) {
                appendMsgSafe("[Error] Cleanup error: " + ex.getMessage());
            }
        }).start();
    } else {
        writer.println("msg:" + msg);
        writer.flush();
    }

} else {
    appendMsgSafe("[Client] [Not Sent: No Server Connection]");
}


    }//GEN-LAST:event_msg_sendActionPerformed

    /**
     * @param args the command line arguments
     */    // Main method to start GUI

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new client().setVisible(true);
            }
        });
       

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    // End of variables declaration//GEN-END:variables
// Feature 1, 3, 4, 5, 6 implemented in this method
    
private void startConnectionThread() {
    new Thread(() -> {
        boolean retryMessageShown = false;

        while (keepRunning) {
            try {
              // Feature 1: Establish connection to server

                SocketAddress sockaddr = new InetSocketAddress("127.0.0.1", 1234);
                s = new Socket();
                s.connect(sockaddr, 10000); // 10 sec timeout

                reader = new BufferedReader(new InputStreamReader(s.getInputStream()));
                writer = new PrintWriter(s.getOutputStream(), true);

                if (retryMessageShown) {
                    appendMsgSafe("[INFO] Reconnected to server.");
                } else {
                    appendMsgSafe("[INFO] Connected to the server at 127.0.0.1:1234");
                }

                retryMessageShown = false;

                String msgin;

 // Feature 3: Receive data from server
 while (keepRunning && (msgin = reader.readLine()) != null) {
                    String trimmedMsg = msgin.trim();
                    if (trimmedMsg.isEmpty()) continue;

                    if (trimmedMsg.startsWith("msg:")) {
                        String actual = trimmedMsg.substring(4).trim();
                        appendMsgSafe("Server: " + actual);
                    } else if (trimmedMsg.equalsIgnoreCase("exit:")) {
                        keepRunning = false;
                        appendMsgSafe("[INFO] Server closed the connection.");
                        break;
                    } else {
                        appendMsgSafe("Server: " + trimmedMsg);
                    }
                }
                               // Handle disconnection

                if (keepRunning) {
                    appendMsgSafe("[Warning] Server disconnected.");
                }

                try {
                    if (reader != null) reader.close();
                    if (writer != null) writer.close();
                    if (s != null && !s.isClosed()) s.close();
                } catch (IOException closeErr) {
                    appendMsgSafe("[Error] Cleanup error: " + closeErr.getMessage());
                }
               //  Feature 5: Auto-reconnect delay


                if (keepRunning) {
                    appendMsgSafe("[INFO] Attempting to reconnect in 2 seconds...");
                }

            } catch (IOException e) {
            // Feature 4: Handle connection timeouts and errors

                if (!retryMessageShown) {
                    appendMsgSafe("\n[Warning] Server not available. Retrying to connect...");
                    retryMessageShown = true;
                }
            }

            try {
                Thread.sleep(2000);
            } catch (InterruptedException ignored) {}
        }
    }).start();
}
//  Feature 7: Interactive GUI for chat

   private void appendMsgSafe(String text) {
    SwingUtilities.invokeLater(() -> {
        msg_area.append(text + "\n");
    });
}
}
